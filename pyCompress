#!/usr/bin/env python3

"""The pyCompress script."""

import click

from pyCompress4NC.core import Runner


@click.group(invoke_without_command=True)
@click.option(
    '--config_file',
    type=click.Path(exists=True),
    help='Yaml file to set all input parameters, can replace command line parameters',
)
@click.option('--queue', default='regular', help='Cluster queue name', show_default=True)
@click.option(
    '--walltime', default='1:00:00', help='Expected walltime of the job', show_default=True
)
@click.option(
    '--memory',
    default='109GB',
    help='Expected memory needed on each computing node',
    show_default=True,
)
@click.option(
    '--maxcore_per_node', default=36, help='Core count on each computing node', show_default=True
)
@click.option(
    '--number_of_workers_per_nodes',
    default=10,
    help='Number of cores required on each node',
    show_default=True,
)
@click.option('--number_of_nodes', default=1, help='Number of nodes required', show_default=True)
@click.option('--to_nc', is_flag=True, help='Writing to netcdf format', show_default=True)
@click.option('--parallel', is_flag=True, help='Running in parallel mode', show_default=True)
@click.option(
    '--split_nc',
    is_flag=True,
    help='Write out several NetCDF files for each one input file',
    show_default=True,
)
@click.option(
    '--input_file',
    type=click.Path(),
    help='Single input file name with absolute path, if set, input_file will be used instead of input_dir.',
)
@click.option(
    '--input_dir',
    type=click.Path(),
    help='Input directory name, will be used if input_file is not set "", otherwise will not be used.',
)
@click.option(
    '--output_dir', default='.', type=click.Path(), help='Output directory name', show_default=True
)
@click.option(
    '--start', default=0, help='Start index of the file in a file list', show_default=True
)
@click.option('--end', default=1, help='End index of the file in a file list', show_default=True)
@click.option(
    '--comp_method',
    default='zfp',
    help='Specify which compression method will be used on time variant variable.',
    show_default=True,
)
@click.option(
    '--comp_mode',
    default='a',
    help='Specify which compression mode will be used.',
    show_default=True,
)
@click.option(
    '--comp_level',
    default=0.1,
    help='Specify which compression level will be used.',
    show_default=True,
)
@click.option(
    '--chunkable_dimension',
    default={},
    help='Specify the chunk dimension for some variables.',
    show_default=True,
)
@click.option(
    '--chunkable_chunksize',
    default=10,
    help='Specify the chunk size for chunkable_dimension.',
    show_default=True,
)
@click.pass_context
def cli(
    context,
    config_file,
    queue,
    walltime,
    memory,
    maxcore_per_node,
    number_of_workers_per_nodes,
    number_of_nodes,
    to_nc,
    parallel,
    split_nc,
    input_file,
    input_dir,
    output_dir,
    start,
    end,
    comp_method,
    comp_mode,
    comp_level,
    chunkable_dimension,
    chunkable_chunksize,
):
    context.obj = {
        'config_file': config_file,
        'queue': queue,
        'walltime': walltime,
        'memory': memory,
        'maxcore_per_node': maxcore_per_node,
        'number_of_workers_per_nodes': number_of_workers_per_nodes,
        'number_of_nodes': number_of_nodes,
        'to_nc': to_nc,
        'parallel': parallel,
        'split_nc': split_nc,
        'input_file': input_file,
        'input_dir': input_dir,
        'output_dir': output_dir,
        'start': start,
        'end': end,
        'comp_method': comp_method,
        'comp_mode': comp_mode,
        'comp_level': comp_level,
        'chunkable_dimension': chunkable_dimension,
        'chunkable_chunksize': chunkable_chunksize,
    }
    runner = Runner(**context.obj)
    runner.run()


if __name__ == '__main__':
    cli()
